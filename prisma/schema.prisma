// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleEnum {
  ADMIN @map("admin")
  RESTAURANT @map("restaurant")
  USER @map("user")

  @@map("roleEnum")
}

model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  firstName String
  lastName String
  hashedPassword String? @db.VarChar(1000)
  image String? @db.VarChar(1000)
  role RoleEnum @default(USER)

  accounts Account?
  restuarantsOwned RestaurantDetails[]

  @@map("user")
}

enum UserStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  SUSPENDED @map("suspended")

  @@map("userStatus")
}

model Account {
  id String @id @default(uuid())

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  status UserStatus @default(ACTIVE)


  providerType String @default("local")
  provider String @default("local")
  providerAccountId String

  refreshToken String? @db.VarChar(1000)
  accessToken String? @db.VarChar(1000)
  accessTokenExpires Int? // In minutes
  tokenType String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

// Restaurant Details
enum RestaurantStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  SUSPENDED @map("suspended")

  @@map("restaurantStatus")
}

model RestaurantDetails {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status RestaurantStatus @default(ACTIVE)

  // Restaurant Info
  name String 
  phone String
  description String? @db.MediumText
  website String?
  image String? @db.VarChar(500)

  // Location Data
  address RestaurantAddress[]

  // Restaurant Media
  images Media[]

  // Owner Info
  ownerId String
  ownerUser User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Restaurant Orders
  ordersPlaced RestaurantOrder[]

  // Food Order List
  foodOrders FoodOrder[]

  @@unique([name, ownerId])
  @@map("restaurantDetails")
}

model RestaurantOrder {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Items Ordered
  orderItems OrderItem[]

  // Restaurant Ordering
  restaurantId String
  restaurant RestaurantDetails @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurantOrder")
}

model OrderItem {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int

  // Product Ordered
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Placed Order
  orderPlacedId String
  orderPlaced RestaurantOrder @relation(fields: [orderPlacedId], references: [id], onDelete: Cascade)

  @@map("orderItem")
}

model Product {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Product Info
  name String // Name of the item
  description String? @db.VarChar(250)
  sizeValue Float?
  sizeUnit String? // Size of the item in oz, lbs, etc
  size String?

  rating Float @default(3.5) // 1-5 
  tags Tag[]  // Tags for the food item such as Premium, Gluten Free, vegan, etc

  // Logo
  image Media[]

  // For Restaurants Placing Orders
  orderItems OrderItem[]

  // For Restaurants Creating Order Record
  foodOrderItems FoodOrderItem[]

  @@map("product")
}

model Tag {
  id Int @id @default(autoincrement())
  name String 
  products Product[]

  @@map("tags")
}

//// Previous Orders Model 
// Food Order Models
model FoodOrder {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Order Info
  orderName String
  dateOfOrder DateTime?
  orderDescription String? @db.VarChar(250)
  orderItems FoodOrderItem[]

  // Distributor Info
  distributor String
  distributorId String?
  distributorInfo Distributor? @relation(fields: [distributorId], references: [id])

  // Order Restaurant
  restaurantId String
  restaurant RestaurantDetails @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("foodOrder")
}

model FoodOrderItem {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Order Info
  productName String
  productId String?
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  description String? @db.VarChar(500)
  quantity Int
  price Decimal

  // Food Order
  foodOrderId String
  foodOrder FoodOrder @relation(fields: [foodOrderId], references: [id], onDelete: Cascade)

  @@map("foodOrderItem")
}

model Distributor {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Distributor Info
  name String
  description String? @db.VarChar(500)
  email String?
  phone String?
  website String? @db.VarChar(250)
  
  // Location Data
  address DistributorAddress[]

  // Distributor Media
  images Media[]

  // Distributor Food Orders
  ordersFulfilled FoodOrder[]

  @@map("distributor")
}

model RestaurantAddress {
  id        Int      @id @default(autoincrement())
  restaurantId  String    @unique
  address1  String @db.VarChar(350)
  address2  String?
  city      String @db.VarChar(50)
  state     String @db.VarChar(4)
  country   String 
  zip       String @db.VarChar(10)
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurant   RestaurantDetails  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restaurantAddress")
}

model DistributorAddress {
  id        Int      @id @default(autoincrement())
  distributorId  String    @unique
  address1  String @db.VarChar(350)
  address2  String? 
  city      String @db.VarChar(50)
  state     String @db.VarChar(4)
  country   String 
  zip       String @db.VarChar(10)
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurant   Distributor  @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  @@map("distributorAddress")
}

// Media Models
model Media {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName String
  fileSize BigInt 
  fileUrl String @db.VarChar(500)
  fileType String

  
  // Restaurant Info
  restaurantId String?
  restaurant RestaurantDetails? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  // Distributor Info
  distributorId String?
  distributor Distributor? @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  // Food Order Info
  productId String?
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("media")
}
